-- Author program schema extensions

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'author_application_status') THEN
    CREATE TYPE author_application_status AS ENUM (
      'draft',
      'submitted',
      'under_review',
      'accepted',
      'rejected',
      'needs_more_info'
    );
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'community_contributor_status') THEN
    CREATE TYPE community_contributor_status AS ENUM (
      'pending',
      'approved',
      'suspended',
      'revoked'
    );
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'community_submission_status') THEN
    CREATE TYPE community_submission_status AS ENUM (
      'draft',
      'submitted',
      'in_review',
      'needs_revision',
      'approved',
      'scheduled',
      'published',
      'withdrawn',
      'declined'
    );
  END IF;
END;
$$;

CREATE TABLE IF NOT EXISTS public.community_contributors (
  profile_id uuid PRIMARY KEY REFERENCES public.profiles(id) ON DELETE CASCADE,
  status community_contributor_status NOT NULL DEFAULT 'pending',
  approved_at timestamptz,
  revoked_at timestamptz,
  level text DEFAULT 'contributor',
  onboarding_checklist jsonb NOT NULL DEFAULT '{}'::jsonb,
  signed_agreement boolean NOT NULL DEFAULT false,
  created_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
  updated_at timestamptz NOT NULL DEFAULT timezone('utc', now())
);

CREATE TABLE IF NOT EXISTS public.author_applications (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  profile_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  status author_application_status NOT NULL DEFAULT 'submitted',
  application_payload jsonb NOT NULL DEFAULT '{}'::jsonb,
  focus_areas text[] NOT NULL DEFAULT '{}'::text[],
  experience_level text,
  current_role text,
  community_participation text,
  published_links text[] NOT NULL DEFAULT '{}'::text[],
  social_handles jsonb,
  writing_sample_url text,
  pitch jsonb NOT NULL DEFAULT '{}'::jsonb,
  consent boolean NOT NULL DEFAULT false,
  editorial_policy_acknowledged boolean NOT NULL DEFAULT false,
  newsletter_opt_in boolean NOT NULL DEFAULT false,
  submitted_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
  reviewed_at timestamptz,
  reviewed_by uuid REFERENCES public.profiles(id),
  review_notes text,
  created_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
  updated_at timestamptz NOT NULL DEFAULT timezone('utc', now())
);

CREATE UNIQUE INDEX IF NOT EXISTS author_applications_profile_active_idx
  ON public.author_applications(profile_id)
  WHERE status IN ('submitted', 'under_review', 'accepted', 'needs_more_info');

CREATE TABLE IF NOT EXISTS public.community_submissions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  profile_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  post_id uuid REFERENCES public.posts(id) ON DELETE SET NULL,
  status community_submission_status NOT NULL DEFAULT 'draft',
  title text NOT NULL,
  slug text,
  summary text,
  reading_time integer,
  categories text[] NOT NULL DEFAULT '{}'::text[],
  tags text[] NOT NULL DEFAULT '{}'::text[],
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  content text NOT NULL,
  editorial_checklist jsonb NOT NULL DEFAULT '{}'::jsonb,
  notes jsonb NOT NULL DEFAULT '{}'::jsonb,
  attachments jsonb NOT NULL DEFAULT '[]'::jsonb,
  last_autosaved_at timestamptz,
  submitted_at timestamptz,
  reviewed_at timestamptz,
  feedback text,
  created_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
  updated_at timestamptz NOT NULL DEFAULT timezone('utc', now())
);

CREATE UNIQUE INDEX IF NOT EXISTS community_submissions_slug_idx
  ON public.community_submissions(slug)
  WHERE slug IS NOT NULL;

CREATE TABLE IF NOT EXISTS public.community_submission_events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_id uuid NOT NULL,
  entity_type text NOT NULL,
  event text NOT NULL,
  payload jsonb NOT NULL DEFAULT '{}'::jsonb,
  actor_profile_id uuid,
  created_at timestamptz NOT NULL DEFAULT timezone('utc', now())
);

ALTER TABLE public.community_contributors ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.author_applications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.community_submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.community_submission_events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "contributors can view their row"
  ON public.community_contributors
  FOR SELECT
  USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "contributors can update their row"
  ON public.community_contributors
  FOR UPDATE
  USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id))
  WITH CHECK (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "admins manage contributors"
  ON public.community_contributors
  FOR ALL
  USING (public.user_has_any_role(ARRAY['admin', 'editor']))
  WITH CHECK (public.user_has_any_role(ARRAY['admin', 'editor']));

CREATE POLICY "applicants can view their applications"
  ON public.author_applications
  FOR SELECT
  USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "applicants can insert applications"
  ON public.author_applications
  FOR INSERT
  WITH CHECK (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "applicants can update drafts"
  ON public.author_applications
  FOR UPDATE
  USING (
    auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id)
    AND status IN ('draft', 'submitted', 'needs_more_info')
  )
  WITH CHECK (
    auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id)
  );

CREATE POLICY "admins review applications"
  ON public.author_applications
  FOR UPDATE
  USING (public.user_has_any_role(ARRAY['admin', 'editor']))
  WITH CHECK (public.user_has_any_role(ARRAY['admin', 'editor']));

CREATE POLICY "contributors view their submissions"
  ON public.community_submissions
  FOR SELECT
  USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "contributors manage their submissions"
  ON public.community_submissions
  FOR ALL
  USING (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id))
  WITH CHECK (auth.uid() = (SELECT user_id FROM public.profiles WHERE id = profile_id));

CREATE POLICY "admins view submission events"
  ON public.community_submission_events
  FOR SELECT
  USING (public.user_has_any_role(ARRAY['admin', 'editor']));

CREATE POLICY "insert submission events"
  ON public.community_submission_events
  FOR INSERT
  WITH CHECK (true);

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'community_contributors_set_updated_at'
  ) THEN
    CREATE TRIGGER community_contributors_set_updated_at
      BEFORE UPDATE ON public.community_contributors
      FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'author_applications_set_updated_at'
  ) THEN
    CREATE TRIGGER author_applications_set_updated_at
      BEFORE UPDATE ON public.author_applications
      FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'community_submissions_set_updated_at'
  ) THEN
    CREATE TRIGGER community_submissions_set_updated_at
      BEFORE UPDATE ON public.community_submissions
      FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
  END IF;
END;
$$;
